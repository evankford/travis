/**
 * Sets a media query for the specified breakpoint
 *
 * Accepts:
 * - $media-query: {String} Breakpoint variable (list found in variables.scss)
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *     color: red;
 *   }
 * }

 */

// Grid
$grid-tiny: 38.85em;
$grid-medium: 52.85em;
$grid-large: 65.85em;
$grid-widescreen: 87.5em;
$grid-max-width: 73.75em;
$grid-gutter: 30px;
// Breakpoints used with the media-query mixin
$tiny: 'tiny';
$small: 'small';
$medium: 'medium';
$medium-down: 'medium-down';
$medium-up: 'medium-up';
$large: 'large';
$large-down: 'large-down';
$large-up: 'large-up';
$widescreen: 'widescreen';
$breakpoints: ( $tiny '(max-width: #{$grid-tiny - 1})', $small '(max-width: #{$grid-medium - 1})', $medium '(min-width: #{$grid-medium}) and (max-width: #{$grid-large - 1})', $medium-down '(max-width: #{$grid-large - 1})', $medium-up '(min-width: #{$grid-medium})', $large '(min-width: #{$grid-large}) and (max-width: #{$grid-widescreen - 1})', $large-down '(max-width: #{$grid-widescreen - 1})', $large-up '(min-width: #{$grid-large})', $widescreen '(min-width: #{$grid-widescreen})');
@mixin media-query($media-query) {
    $breakpoint-found: false;
    @each $breakpoint in $breakpoints {
        $name: nth($breakpoint, 1);
        $declaration: nth($breakpoint, 2);
        @if $media-query==$name and $declaration {
            $breakpoint-found: true;
            @media only screen and #{$declaration} {
                @content;
            }
        }
    }
}

%max-width {
     max-width: 1550px;
    padding: 0 2.5%;
    padding: 0 2.5vw;
    margin: auto;
    width: 100%;
}

%normal-width {
     max-width: 1350px;
    padding: 0 0;
    width: 95%;
    margin: auto;
}
%text-width {
     max-width: 1100px;
    padding: 0 0;
    width: 92.5%;
    margin: auto;
}